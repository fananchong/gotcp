// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	MsgEcho
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Cmd int32

const (
	Cmd_Invaild Cmd = 0
	Cmd_Echo    Cmd = 1
)

var Cmd_name = map[int32]string{
	0: "Invaild",
	1: "Echo",
}
var Cmd_value = map[string]int32{
	"Invaild": 0,
	"Echo":    1,
}

func (x Cmd) String() string {
	return proto.EnumName(Cmd_name, int32(x))
}
func (Cmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MsgEcho struct {
	Num int32 `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
}

func (m *MsgEcho) Reset()                    { *m = MsgEcho{} }
func (m *MsgEcho) String() string            { return proto.CompactTextString(m) }
func (*MsgEcho) ProtoMessage()               {}
func (*MsgEcho) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MsgEcho) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgEcho)(nil), "main.MsgEcho")
	proto.RegisterEnum("main.Cmd", Cmd_name, Cmd_value)
}

func init() { proto.RegisterFile("test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 102 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x53, 0x92, 0xe6, 0x62,
	0xf7, 0x2d, 0x4e, 0x77, 0x4d, 0xce, 0xc8, 0x17, 0x12, 0xe0, 0x62, 0xce, 0x2b, 0xcd, 0x95, 0x60,
	0x54, 0x60, 0xd4, 0x60, 0x0d, 0x02, 0x31, 0xb5, 0x64, 0xb8, 0x98, 0x9d, 0x73, 0x53, 0x84, 0xb8,
	0xb9, 0xd8, 0x3d, 0xf3, 0xca, 0x12, 0x33, 0x73, 0x52, 0x04, 0x18, 0x84, 0x38, 0xb8, 0x58, 0x40,
	0xaa, 0x05, 0x18, 0x93, 0xd8, 0xc0, 0xe6, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x00, 0x15,
	0xe2, 0x41, 0x55, 0x00, 0x00, 0x00,
}
